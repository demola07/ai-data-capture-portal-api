apiVersion: apps/v1
kind: Deployment
metadata:
  name: ai-data-capture-api
  namespace: ai-data-capture
  labels:
    app: ai-data-capture-api
    version: v1
    environment: production
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: ai-data-capture-api
  template:
    metadata:
      labels:
        app: ai-data-capture-api
        version: v1
        environment: production
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8000"
        prometheus.io/path: "/metrics"
    spec:
      # Security context
      # securityContext:
      #   runAsNonRoot: true
      #   runAsUser: 1001
      #   runAsGroup: 1001
      #   fsGroup: 1001
      
      # Service account for RBAC
      # serviceAccountName: ai-data-capture-api-sa
      
      # Image pull secrets for private Docker Hub repository
      imagePullSecrets:
      - name: ai-data-capture-registry-secret
      
      containers:
      - name: api
        image: demola07/ai-data-capture:v1
        imagePullPolicy: Always
        
        ports:
        - containerPort: 8000
          name: http
          protocol: TCP
        
        # Environment variables from secrets
        env:
        # Database configuration from secrets
        - name: database_hostname
          valueFrom:
            secretKeyRef:
              name: ai-data-capture-secret
              key: database_hostname
        - name: database_port
          valueFrom:
            secretKeyRef:
              name: ai-data-capture-secret
              key: database_port
        - name: database_password
          valueFrom:
            secretKeyRef:
              name: ai-data-capture-secret
              key: database_password
        - name: database_name
          valueFrom:
            secretKeyRef:
              name: ai-data-capture-secret
              key: database_name
        - name: database_username
          valueFrom:
            secretKeyRef:
              name: ai-data-capture-secret
              key: database_username
        - name: secret_key
          valueFrom:
            secretKeyRef:
              name: ai-data-capture-secret
              key: secret_key
        - name: algorithm
          valueFrom:
            secretKeyRef:
              name: ai-data-capture-secret
              key: algorithm
        - name: access_token_expire_minutes
          valueFrom:
            secretKeyRef:
              name: ai-data-capture-secret
              key: access_token_expire_minutes
        - name: AWS_ACCESS_KEY
          valueFrom:
            secretKeyRef:
              name: ai-data-capture-secret
              key: AWS_ACCESS_KEY
        - name: AWS_SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: ai-data-capture-secret
              key: AWS_SECRET_KEY
        - name: AWS_REGION
          valueFrom:
            secretKeyRef:
              name: ai-data-capture-secret
              key: AWS_REGION
        - name: S3_BUCKET
          valueFrom:
            secretKeyRef:
              name: ai-data-capture-secret
              key: S3_BUCKET
        - name: OPENAI_API_KEY
          valueFrom:
            secretKeyRef:
              name: ai-data-capture-secret
              key: OPENAI_API_KEY
        
        # Optional: Additional environment variables for app configuration
        - name: ENVIRONMENT
          value: "production"
        - name: LOG_LEVEL
          value: "INFO"
        
        # Resource limits and requests
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        
        # Health checks
        livenessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        
        readinessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        
        # Startup probe for slow-starting containers
        startupProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 30
        
        # Security context for container
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: false
          capabilities:
            drop:
            - ALL
        
        # Volume mounts
        volumeMounts:
        # Temporary directories
        - name: tmp
          mountPath: /tmp
        - name: app-logs
          mountPath: /app/logs
      
      # Volumes
      volumes:
      - name: tmp
        emptyDir: {}
      - name: app-logs
        emptyDir: {}
      
      # Pod disruption budget considerations
      # Affinity rules for better distribution
#      affinity:
#        podAntiAffinity:
#          preferredDuringSchedulingIgnoredDuringExecution:
#          - weight: 100
#            podAffinityTerm:
#              labelSelector:
#                matchExpressions:
#                - key: app
#                  operator: In
#                  values:
#                  - ai-data-capture-api
#              topologyKey: kubernetes.io/hostname
      
      # Tolerations (if needed for specific node taints)
      # tolerations:
      # - key: "node-role"
      #   operator: "Equal"
      #   value: "worker"
      #   effect: "NoSchedule"
      
      # Node selector (if needed for specific node requirements)
      # nodeSelector:
      #   node-type: worker
      
      # Restart policy
      restartPolicy: Always
      
      # DNS policy
      dnsPolicy: ClusterFirst
      
      # Termination grace period
      terminationGracePeriodSeconds: 30
